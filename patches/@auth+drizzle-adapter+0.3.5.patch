diff --git a/node_modules/@auth/drizzle-adapter/src/lib/sqlite.ts b/node_modules/@auth/drizzle-adapter/src/lib/sqlite.ts
index 81fdaa5..18539ed 100644
--- a/node_modules/@auth/drizzle-adapter/src/lib/sqlite.ts
+++ b/node_modules/@auth/drizzle-adapter/src/lib/sqlite.ts
@@ -20,45 +20,45 @@ export function createTables(sqliteTable: SQLiteTableFn) {
   })
 
   const accounts = sqliteTable(
-    "account",
-    {
-      userId: text("userId")
-        .notNull()
-        .references(() => users.id, { onDelete: "cascade" }),
-      type: text("type").$type<AdapterAccount["type"]>().notNull(),
-      provider: text("provider").notNull(),
-      providerAccountId: text("providerAccountId").notNull(),
-      refresh_token: text("refresh_token"),
-      access_token: text("access_token"),
-      expires_at: integer("expires_at"),
-      token_type: text("token_type"),
-      scope: text("scope"),
-      id_token: text("id_token"),
-      session_state: text("session_state"),
-    },
-    (account) => ({
-      compoundKey: primaryKey(account.provider, account.providerAccountId),
-    })
+      "account",
+      {
+        userId: text("userId")
+            .notNull()
+            .references(() => users.id, { onDelete: "cascade" }),
+        type: text("type").$type<AdapterAccount["type"]>().notNull(),
+        provider: text("provider").notNull(),
+        providerAccountId: text("providerAccountId").notNull(),
+        refresh_token: text("refresh_token"),
+        access_token: text("access_token"),
+        expires_at: integer("expires_at"),
+        token_type: text("token_type"),
+        scope: text("scope"),
+        id_token: text("id_token"),
+        session_state: text("session_state"),
+      },
+      (account) => ({
+        compoundKey: primaryKey(account.provider, account.providerAccountId),
+      })
   )
 
   const sessions = sqliteTable("session", {
     sessionToken: text("sessionToken").notNull().primaryKey(),
     userId: text("userId")
-      .notNull()
-      .references(() => users.id, { onDelete: "cascade" }),
+        .notNull()
+        .references(() => users.id, { onDelete: "cascade" }),
     expires: integer("expires", { mode: "timestamp_ms" }).notNull(),
   })
 
   const verificationTokens = sqliteTable(
-    "verificationToken",
-    {
-      identifier: text("identifier").notNull(),
-      token: text("token").notNull(),
-      expires: integer("expires", { mode: "timestamp_ms" }).notNull(),
-    },
-    (vt) => ({
-      compoundKey: primaryKey(vt.identifier, vt.token),
-    })
+      "verificationToken",
+      {
+        identifier: text("identifier").notNull(),
+        token: text("token").notNull(),
+        expires: integer("expires", { mode: "timestamp_ms" }).notNull(),
+      },
+      (vt) => ({
+        compoundKey: primaryKey(vt.identifier, vt.token),
+      })
   )
 
   return { users, accounts, sessions, verificationTokens }
@@ -67,70 +67,70 @@ export function createTables(sqliteTable: SQLiteTableFn) {
 export type DefaultSchema = ReturnType<typeof createTables>
 
 export function SQLiteDrizzleAdapter(
-  client: InstanceType<typeof BaseSQLiteDatabase>,
-  tableFn = defaultSqliteTableFn
+    client: InstanceType<typeof BaseSQLiteDatabase>,
+    tableFn = defaultSqliteTableFn
 ): Adapter {
   const { users, accounts, sessions, verificationTokens } =
-    createTables(tableFn)
+      createTables(tableFn)
 
   return {
-    createUser(data) {
+    async createUser(data) {
       return client
-        .insert(users)
-        .values({ ...data, id: crypto.randomUUID() })
-        .returning()
-        .get()
+          .insert(users)
+          .values({ ...data, id: crypto.randomUUID() })
+          .returning()
+          .get()
     },
-    getUser(data) {
-      return client.select().from(users).where(eq(users.id, data)).get() ?? null
+    async getUser(data) {
+      return (await client.select().from(users).where(eq(users.id, data)).get()) ?? null
     },
-    getUserByEmail(data) {
+    async getUserByEmail(data) {
       return (
-        client.select().from(users).where(eq(users.email, data)).get() ?? null
+          (await client.select().from(users).where(eq(users.email, data)).get()) ?? null
       )
     },
-    createSession(data) {
+    async createSession(data) {
       return client.insert(sessions).values(data).returning().get()
     },
-    getSessionAndUser(data) {
+    async getSessionAndUser(data) {
       return (
-        client
-          .select({
-            session: sessions,
-            user: users,
-          })
-          .from(sessions)
-          .where(eq(sessions.sessionToken, data))
-          .innerJoin(users, eq(users.id, sessions.userId))
-          .get() ?? null
+          (await client
+              .select({
+                session: sessions,
+                user: users,
+              })
+              .from(sessions)
+              .where(eq(sessions.sessionToken, data))
+              .innerJoin(users, eq(users.id, sessions.userId))
+              .get()) ?? null
       )
     },
-    updateUser(data) {
+    async updateUser(data) {
       if (!data.id) {
         throw new Error("No user id.")
       }
 
       return client
-        .update(users)
-        .set(data)
-        .where(eq(users.id, data.id))
-        .returning()
-        .get()
+          .update(users)
+          .set(data)
+          .where(eq(users.id, data.id))
+          .returning()
+          .get()
     },
-    updateSession(data) {
+    async updateSession(data) {
       return client
-        .update(sessions)
-        .set(data)
-        .where(eq(sessions.sessionToken, data.sessionToken))
-        .returning()
-        .get()
+          .update(sessions)
+          .set(data)
+          .where(eq(sessions.sessionToken, data.sessionToken))
+          .returning()
+          .get()
     },
-    linkAccount(rawAccount) {
-      const updatedAccount = client
-        .insert(accounts)
-        .values(rawAccount)
-        .returning()
-        .get()
+    async linkAccount(rawAccount) {
+      const updatedAccount = await (client
+          .insert(accounts)
+          .values(rawAccount)
+          .returning()
+          .get())
 
       const account: AdapterAccount = {
         ...updatedAccount,
@@ -146,64 +146,64 @@ export function SQLiteDrizzleAdapter(
 
       return account
     },
-    getUserByAccount(account) {
-      const results = client
-        .select()
-        .from(accounts)
-        .leftJoin(users, eq(users.id, accounts.userId))
-        .where(
-          and(
-            eq(accounts.provider, account.provider),
-            eq(accounts.providerAccountId, account.providerAccountId)
+    async getUserByAccount(account) {
+      const results = await (client
+          .select()
+          .from(accounts)
+          .leftJoin(users, eq(users.id, accounts.userId))
+          .where(
+              and(
+                  eq(accounts.provider, account.provider),
+                  eq(accounts.providerAccountId, account.providerAccountId)
+              )
           )
-        )
-        .get()
+          .get())
 
       return results?.user ?? null
     },
-    deleteSession(sessionToken) {
+    async deleteSession(sessionToken) {
       return (
-        client
-          .delete(sessions)
-          .where(eq(sessions.sessionToken, sessionToken))
-          .returning()
-          .get() ?? null
+          (await client
+              .delete(sessions)
+              .where(eq(sessions.sessionToken, sessionToken))
+              .returning()
+              .get()) ?? null
       )
     },
-    createVerificationToken(token) {
+    async createVerificationToken(token) {
       return client.insert(verificationTokens).values(token).returning().get()
     },
-    useVerificationToken(token) {
+    async useVerificationToken(token) {
       try {
         return (
-          client
-            .delete(verificationTokens)
-            .where(
-              and(
-                eq(verificationTokens.identifier, token.identifier),
-                eq(verificationTokens.token, token.token)
-              )
-            )
-            .returning()
-            .get() ?? null
+            (await client
+                .delete(verificationTokens)
+                .where(
+                    and(
+                        eq(verificationTokens.identifier, token.identifier),
+                        eq(verificationTokens.token, token.token)
+                    )
+                )
+                .returning()
+                .get()) ?? null
         )
       } catch (err) {
         throw new Error("No verification token found.")
       }
     },
-    deleteUser(id) {
+    async deleteUser(id) {
       return client.delete(users).where(eq(users.id, id)).returning().get()
     },
-    unlinkAccount(account) {
-      client
-        .delete(accounts)
-        .where(
-          and(
-            eq(accounts.providerAccountId, account.providerAccountId),
-            eq(accounts.provider, account.provider)
+    async unlinkAccount(account) {
+      await client
+          .delete(accounts)
+          .where(
+              and(
+                  eq(accounts.providerAccountId, account.providerAccountId),
+                  eq(accounts.provider, account.provider)
+              )
           )
-        )
-        .run()
+          .run()
 
       return undefined
     },
